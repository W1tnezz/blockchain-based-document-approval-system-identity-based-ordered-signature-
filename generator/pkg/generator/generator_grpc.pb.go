// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: generator.proto

package generator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrivateKeyGenerator_GetPrivateKey_FullMethodName      = "/generator.PrivateKeyGenerator/getPrivateKey"
	PrivateKeyGenerator_GetMasterPublicKey_FullMethodName = "/generator.PrivateKeyGenerator/getMasterPublicKey"
	PrivateKeyGenerator_GetUAndVForIBSAS_FullMethodName   = "/generator.PrivateKeyGenerator/getUAndVForIBSAS"
)

// PrivateKeyGeneratorClient is the client API for PrivateKeyGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateKeyGeneratorClient interface {
	GetPrivateKey(ctx context.Context, in *GetPrivatekeyRequest, opts ...grpc.CallOption) (*GetPrivatekeyResponse, error)
	GetMasterPublicKey(ctx context.Context, in *GetMasterPublicKeyRequest, opts ...grpc.CallOption) (*GetMasterPublicKeyResponse, error)
	GetUAndVForIBSAS(ctx context.Context, in *GetUAndVForIBSASRequest, opts ...grpc.CallOption) (*GetUAndVForIBSASResponse, error)
}

type privateKeyGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateKeyGeneratorClient(cc grpc.ClientConnInterface) PrivateKeyGeneratorClient {
	return &privateKeyGeneratorClient{cc}
}

func (c *privateKeyGeneratorClient) GetPrivateKey(ctx context.Context, in *GetPrivatekeyRequest, opts ...grpc.CallOption) (*GetPrivatekeyResponse, error) {
	out := new(GetPrivatekeyResponse)
	err := c.cc.Invoke(ctx, PrivateKeyGenerator_GetPrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateKeyGeneratorClient) GetMasterPublicKey(ctx context.Context, in *GetMasterPublicKeyRequest, opts ...grpc.CallOption) (*GetMasterPublicKeyResponse, error) {
	out := new(GetMasterPublicKeyResponse)
	err := c.cc.Invoke(ctx, PrivateKeyGenerator_GetMasterPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateKeyGeneratorClient) GetUAndVForIBSAS(ctx context.Context, in *GetUAndVForIBSASRequest, opts ...grpc.CallOption) (*GetUAndVForIBSASResponse, error) {
	out := new(GetUAndVForIBSASResponse)
	err := c.cc.Invoke(ctx, PrivateKeyGenerator_GetUAndVForIBSAS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateKeyGeneratorServer is the server API for PrivateKeyGenerator service.
// All implementations must embed UnimplementedPrivateKeyGeneratorServer
// for forward compatibility
type PrivateKeyGeneratorServer interface {
	GetPrivateKey(context.Context, *GetPrivatekeyRequest) (*GetPrivatekeyResponse, error)
	GetMasterPublicKey(context.Context, *GetMasterPublicKeyRequest) (*GetMasterPublicKeyResponse, error)
	GetUAndVForIBSAS(context.Context, *GetUAndVForIBSASRequest) (*GetUAndVForIBSASResponse, error)
	mustEmbedUnimplementedPrivateKeyGeneratorServer()
}

// UnimplementedPrivateKeyGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedPrivateKeyGeneratorServer struct {
}

func (UnimplementedPrivateKeyGeneratorServer) GetPrivateKey(context.Context, *GetPrivatekeyRequest) (*GetPrivatekeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateKey not implemented")
}
func (UnimplementedPrivateKeyGeneratorServer) GetMasterPublicKey(context.Context, *GetMasterPublicKeyRequest) (*GetMasterPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterPublicKey not implemented")
}
func (UnimplementedPrivateKeyGeneratorServer) GetUAndVForIBSAS(context.Context, *GetUAndVForIBSASRequest) (*GetUAndVForIBSASResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUAndVForIBSAS not implemented")
}
func (UnimplementedPrivateKeyGeneratorServer) mustEmbedUnimplementedPrivateKeyGeneratorServer() {}

// UnsafePrivateKeyGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateKeyGeneratorServer will
// result in compilation errors.
type UnsafePrivateKeyGeneratorServer interface {
	mustEmbedUnimplementedPrivateKeyGeneratorServer()
}

func RegisterPrivateKeyGeneratorServer(s grpc.ServiceRegistrar, srv PrivateKeyGeneratorServer) {
	s.RegisterService(&PrivateKeyGenerator_ServiceDesc, srv)
}

func _PrivateKeyGenerator_GetPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivatekeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateKeyGeneratorServer).GetPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateKeyGenerator_GetPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateKeyGeneratorServer).GetPrivateKey(ctx, req.(*GetPrivatekeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateKeyGenerator_GetMasterPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateKeyGeneratorServer).GetMasterPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateKeyGenerator_GetMasterPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateKeyGeneratorServer).GetMasterPublicKey(ctx, req.(*GetMasterPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateKeyGenerator_GetUAndVForIBSAS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUAndVForIBSASRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateKeyGeneratorServer).GetUAndVForIBSAS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateKeyGenerator_GetUAndVForIBSAS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateKeyGeneratorServer).GetUAndVForIBSAS(ctx, req.(*GetUAndVForIBSASRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateKeyGenerator_ServiceDesc is the grpc.ServiceDesc for PrivateKeyGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateKeyGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generator.PrivateKeyGenerator",
	HandlerType: (*PrivateKeyGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getPrivateKey",
			Handler:    _PrivateKeyGenerator_GetPrivateKey_Handler,
		},
		{
			MethodName: "getMasterPublicKey",
			Handler:    _PrivateKeyGenerator_GetMasterPublicKey_Handler,
		},
		{
			MethodName: "getUAndVForIBSAS",
			Handler:    _PrivateKeyGenerator_GetUAndVForIBSAS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generator.proto",
}
